◉EC2(Elastic Compute Cloud)
AWSの仮想サーバーサービス。AMIとEBSのスナップショットを合わせたもの。
→仮想サーバーとは?
 サーバー上に論理的なサーバーを作成したもので、サーバーに必要なこれら各種コンポーネントが論理的に作成されている論理的に作成されている
 ・OS → AMI
 ・CPU/Memoty → インスタンスタイプ
 ・SSD → EBS
 ・NIC(Network Interface Card) → ENI
  →NICとは？
   コンピュータなどの機器を通信ネットワークに接続機器を通信ネットワークに接続するためのカード型の拡張装置

●AMI(Amazon Machine Image) 
・EC2インスタンスが起動する時に必要となる設定(テンプレート)ファイル
  - OSやミドルウェアアプリケーションなど、何をインストールするかというテンプレート
  - 起動設定どのユーザーがAMIを起動できるかの設定
  - インスタンスの起動時にアタッチするEBSなどのボリュームを指定する設定
・一つのAMIでEC2を何台も複製できる
・OSやアプリケーションの情報が設定されている情報が設定されている
・OSは選択可能Amazon Linuxが一般的
  Amazon Linuxにはaws cli(CommandLine Interface:コマンドラインシェルでコマンドを使用して AWS サービスとやり取りするためのオープンソースツール)やboto3(AWS SDK fo Python:S3などサービス操作からEC2やVPCといったインフラの設定まで幅広く扱うことができる)、yumリポジトリの設定など、AWSで使うのに最適化されているのでオススメ
  マーケットプレイスで予めWordpressがインストールされたものを選ぶインストールされたものを選ぶこともできるが、有料で企業向け。コミュニティAMI(AWS Developper Communityのメンバーが有志で公開しているもの。無料)

 - 各種Linuxディストリビューション(Redhat,Ubuntu...)
 - Windows Server

AMIは1つのインスタンスから、複数のEC2インスタンスを起動できる
EC2に加えた変更をもとに再び、AMIを作ることができる
AMIは違うリージョンにコピーが可能

●AMIのデザインに対する考え方
1, 通常のAMIは素早く起動し、素早く稼働するというコンセプト ← 初心者向け
AWS初心者にも扱いやすい! ⇄  サーバー用途の種類が増えればそれ用途の種類が増えれば、それだけメンテナンスが面倒になる = 小規模システム向け

2, JeOS(Just enough Operating System) ← 中級者向け
AMiの範囲はOSの必要最低限部分に止めようという考え方
サーバー起動時に予め設定したエージェントが自動で設定ファイルや最新のソフトウェアを取得する 
サーバーの種類が増えても柔軟に対応できる ⇄ 起動時にファイルやソフトのDLで時間がかかる = 不具合のあるインスタンスの置き換えやCPU、メモリ不足時に自動で追加投入するタイプのインスタンスに向いていない

3, Hybrid AMI ← 上級者向け
起動時にどのソフトウェアを予めインストールするか、それとも他の場所からDLするかといったものを調整する。セキュリティアップデートなどの変更が頻繁に入るソフトウェアはDLして、あまり入らないソフトウェアは予めインストールしておくなどの対応が考えられる

https://www.youtube.com/redirect?event=video_description&v=k1mhE5CrO2k&redir_token=bh-HRnSAXWaT-gLLxBcD5sHhtO58MTU4ODIzMDEzMkAxNTg4MTQzNzMy&q=https%3A%2F%2Faws.amazon.com%2Fjp%2Fanswers%2Fconfiguration-management%2Faws-ami-design%2F%3Fnc1%3Dh_ls

◯EBS
 EC2インスタンスが使用するディスクストレージサービス。AZ(データセンター)で冗長化される。
 1 汎用SSD ← デフォルト
 2 プロビジョンド IOPS SSD
  贅沢,IOPSをお金で買う感じ。高性能DBへ接続する時などに使用する
 - IOPS
  毎秒どの程度のデータを書き込み、読み出しできるかの性能指標
 3 スループット最適化HDD
  データウェアハウス、ビッグデータ、ログ処理などで使用される
  - データウェアハウス
   データベースの利用形態の１つで、企業の業務において発生した様々な情報を保管したデータベース
 4 Cold HDD
  料金が安く、アーカイブ保管に向いてる

 ○ スナップショット
  - EBSをバックアップとして取得したファイル
  - 保管場所はS3
  - スナップショット自体をEC2にアタッチ/デタッチできない
  - 増分バックアップ方式 
  - AZサービス
   AZ内で自動で冗長化されるので、高い耐久性がある
   AZ内でコピーできるが、AZを跨いでコピーする場合、S3を経由する事になる
2インスタンスを起動する
  *2つのバックアップ方式
   バックアップを毎日取って運用する場合を例に考える。
   初日に全てのデータをバックアップしてから、翌日以降のバックアップ対象に違いがある
    1 差分バックアップ
     初日からの変更点を基準にする。容量が逼迫するので、バックアップ時間が長いが、復元が楽。
    2 増分バックアップ
     前日からの変更点を基準にする。容量が逼迫しないので、バックアップ時間が短いが、復元が多少複雑。自動化すれば問題ないが。
◯キーペア
作成したEC2インスタンスに誰でもログインできたら困るので、キーペアを作成し、ログインを管理する。
秘密鍵、公開鍵のペアのこと。
EC2インスタンスを起動する時に作成画面が出てくる.
公開鍵で暗号化したデータは秘密鍵でしか開けることはできない。
EC2インスタンスのログイン情報を公開鍵で暗号化して、この公開鍵は秘密鍵とペアになっているので、秘密鍵は拡張子が「.pem」形式のファイルとなっている。
これをダウンロードして厳重に管理し、外部からアクセスできない場所に保管する。
複数のインスタンスに同じ公開鍵を指定することができる。
ログインに必要なのは手元の秘密鍵一つだけでOK
公開鍵はAWSが保管して、管理している。
LinuxタイプのEC2へログインする場合、sshコマンドを引数に秘密鍵を指定してログインする。

・ログイン方法
ssh -i 秘密鍵 ec2-user@IPアドレス

秘密鍵を失った場合でも、再作成ができるので慌てない.
方法はAMIとしてバックアップを取得し、起動し直す際に新たなキーペアを作成するというもの。
https://www.youtube.com/redirect?v=1MMXigDxTdc&event=video_description&q=https%3A%2F%2Faws.amazon.com%2Fjp%2Fpremiumsupport%2Fknowledge-center%2Frecover-access-lost-key-pair%2F%3Fnc1%3Dh_ls&redir_token=F-JuSgQ3iomlgg4KYZMo8mCg_VJ8MTU4ODMyODc2MEAxNTg4MjQyMzYw

◯インスタンスメタデータ
ruby/python/bashなどのプログラムの作成時に、
EC2インスタンス自身のIPアドレスや所属しているサブネットなどの情報を
直接書いてはいませんか？これではプログラムを使いまわせないので、効率的な方法を取りたい

EC2インスタンスには自身の情報が埋め込まれており、
EC2が起動中の場合、このようなCurlコマンドで自身の情報を取得できる
curl http://IPアドレス/latest/meta-data/
これを実行して出力したものから対象を絞って情報を見ていく。
ここでは個別にインスタンスメタデータで検索してみる。
例えば、使用しているAMIのIDやローカルのIPアドレス、所属しているサブネットIDなどが取得できる。

githubで一覧情報を出すScriptは以下から
https://www.youtube.com/redirect?v=1MMXigDxTdc&event=video_description&q=https%3A%2F%2Fgithub.com%2Fboredwookie%2Fec2-metadata-extractor&redir_token=F-JuSgQ3iomlgg4KYZMo8mCg_VJ8MTU4ODMyODc2MEAxNTg4MjQyMzYw
このシェルをコピーして、chmodで実行権を与えて実行すると、インスタンスメタデータの一覧が確認できる
コマンド「ec2-metadata」でも同様のことができる。

◯ユーザーデータ
インスタンス起動時にソフトウェアを最新化するなど、スタートアッププログラムのようなものがあれば、便利。
インスタンス起動時に一回だけ実行するスクリプトがユーザーデータ。
基本的に再起動ではにことに注意。
rootユーザーで実行されることに注意。作成されたファイルもroot権限となるので、必要であれば権限を変更する
操作はインタラクティブではないため、-yが無い「yum update」は使えない。
「yum update -y」 

→Cloud-init
ユーザーデータを書く形式の1つ
クラウド系インスタンスの初期構築を手助けするオープンソースのアプリケーション
Amazon Linuxにはデフォルトで/etc/cloud/配下に設定ファ:イルが存在し、インスタンス作成時にどういった動きをするか指定できる。

*AWSは自ら定めた原則を工夫によって覆すような機能を追加したりする

◯プレイスメントグループ
複数のEC2を論理的にブルーピングすること
AWSのデータセンターは物理ホスト上でEC2が起動され、他のアカウントと共有になるので、クラスター処理には向いていない。この欠点をプレイスメントグループで回避できる。
AZやリージョンを跨ぐことはできない

1 クラスター
一番スタンダード。HPC(ハイパフォーマンスコンピューティング)などの高度な演算処理に向いている.
複数のコンピューターを結合して、一つの高度な処理や計算を行うという基本的な使い方。
クラスターに所属しているコンピューターの１つ１つをノードと呼ぶ。ノード同士のネットワークは密接に結合している必要があるので、AWSでは拡張ネットワークサービスの使用を推奨している。例えばENA(Elastic Network Interface)などがあり、EC2のネットワーク速度を上げることができる。
→20%程度早くなる
参照 https://www.youtube.com/redirect?q=https%3A%2F%2Fdev.classmethod.jp%2Fcloud%2Faws%2Fec2-placement-group%2F&event=video_description&v=dewRUIOblFk&redir_token=ngkdhqR-5DXtOhLDs2ge74REqs58MTU4ODU1NjU5MkAxNTg4NDcwMTky

Amazon LinuxではデフォルトでENAモジュールが入っているので、AWS CLIコマンドで有効化されているか確認できる。これによりさらにノード同士のネットワークの遅延をおさえることができる。同じAMIで使用することも推奨されている。

2 パーティション
データセンターにはサーバーラックにサーバーを収納しており、ラックごとに電源やネットワークといった設備が置かれている。設備の障害時に、クラスターグループの配置パターンによっては、自社システムが全滅ということも有り得る。そこでこれを使用する。先ほどのグルーピングを個別のラックでグループ化する事で、ハード障害を防止できる。

3 スプレッド
個々のEC2を独立したラックに配置する。
ラック障害の懸念は常につきまとう。例えば一つ一つのEC2インスタンスが重要な役割をしているマイクロサービス的なパターンを考える。万が一ラックに障害が起きた場合、やはり自社システムは機能停止に陥る。1つのAZにつき、EC2を7つまで。1つのリージョンにつきAZを3つまで。つまり合計21個配置できる。
ミッションクリティカルな金融システムなどに有効。

◯Dedicatedホスト / インスタンスとは
AWSの物理サーバーのリソースを占有できる事
専用のAWSホストサーバーを確保でき、他のアカウントとの共有は無い。

・両者の違いは？
 ライセンスの持ち込み
  Dedicatedホスト ◯
   クラウドが盛り上がり始めた頃の課題で、オンプレからクラウドに移行するのに、ハードルだったライセンス移行の問題をクリアする目的があったと思われる。今では最初からクラウドに構築するケースが多いので、あまり意識しないかもしれないが、背景事情を含めて捉えると覚えやすいのでは。
  Dedicatedインスタンス ×

通常AWSの物理サーバーは他のアカウントと共有している。これはコンプライアンス違反になる可能性がある。 医療データを管理する場合などはHIPAA（医療データを電子化するルール)違反となる。

◯VPC(Virtual Private Cloud)
アカウントに紐づく仮想ネットワーク空間。他のVPCと論理的に区別されている
アベイラビリティゾーン(データセンター)は跨げるが、リージョン(国)は跨げない
AWSアカウントを作成した後、デフォルトでVPCが1つ設定されている(Default VPC)

通常はこれを使わずに個別で指定していく
VPCにIPアドレスのレンジを決めて、サブネット、ルートテーブル、ナットゲートウェイなどを作成し、セキュリティの設定を行う。VPCを作成する際、どのロケーションに配置するか決めるが、この時リージョンアべイラビリティゾーンという言葉が出てくる。末尾のアルファベットが個別のデータセンターを示している。

東京リージョン = ap-northeast-1a/1c
ソウルリージョン = ap-northeast-2

・サブネット
大きなネットワークを複数の小さなネットワークに分割管理する事で、セキュリティレベルを高める。
AZを跨ぐことはできない。7つのベストプラクティスの故障に備えた設計で障害を回避。1つのAZを選択して作成する。複数のAZに冗長的に配置する.サブネットの分割単位は/24がオススメ。

2つのAZ、同じような構成。
片方のデータセンターに障害が発生した場合でも、もう片方のデータセンターでサービスを問題なく運用できるように考慮しましょうという設計思想。
サブネットは機能ごとに分けるのが一般的。
HTTP通信を受け取るDMZサーバー、内部からの通信のみ受信するデータベースのDBサブネット
それぞれフィルタリングポリシーが異なるので、それぞれサブネットを分ける
/24がオススメ。十分な数のIPアドレスが確保できる。
サブネットを細かく分割し過ぎてしまうと、例えば最小分割単位の/28だと、ロードバランサーを作成できなくなる。

 